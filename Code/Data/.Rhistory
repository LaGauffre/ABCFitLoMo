X
# Somme des sinistres
X <- unlist(lapply(U, sum))
X
params_loi_N <- c(10, 0.1)
N <- rnbinom(sample_size, size = params_loi_N[1], prob = params_loi_N[2])
N
# Fonction pour simuler des montants agrégés de sinistres
loi_N <- 'Binomial Negatif'
loi_U <- 'Gamma'
params_loi_N <- c(10, 0.1)
params_loi_U <- c(1, 20)
sample_size <- 10
#Sans boucle for
#Simulation du nombre de sinistres
if(loi_N == "Poisson"){
N <- rpois(sample_size, params_loi_N[1])
}else if(loi_N == "Binomial Negatif"){
N <- rnbinom(sample_size, size = params_loi_N[1], prob = params_loi_N[2])
}
#Simultation des montants de sinistres
if(loi_U = "Abs-Normal"){
U <- lapply(N, function(n) abs(rnorm(n, params_loi_U[1], params_loi_U[2])))
}else if(loi_U == "Gamma"){
U <- lapply(N, function(n) rgamma(n, params_loi_U[1], params_loi_U[2]))
}
U <- lapply(N, function(n) abs(rnorm(n, params_loi_U[1], params_loi_U[2])))
U <- lapply(N, function(n) rgamma(n, params_loi_U[1], params_loi_U[2]))
#Simultation des montants de sinistres
if(loi_U = "Abs-Normal"){
U <- lapply(N, function(n) abs(rnorm(n, params_loi_U[1], params_loi_U[2])))
}else if(loi_U == "Gamma"){
U <- lapply(N, function(n) rgamma(n, params_loi_U[1], params_loi_U[2]))
}
#Sans boucle for
#Simulation du nombre de sinistres
if(loi_N == "Poisson"){
N <- rpois(sample_size, params_loi_N[1])
}else if(loi_N == "Binomial Negatif"){
N <- rnbinom(sample_size, size = params_loi_N[1], prob = params_loi_N[2])
}
#Simultation des montants de sinistres
if(loi_U == "Abs-Normal"){
U <- lapply(N, function(n) abs(rnorm(n, params_loi_U[1], params_loi_U[2])))
}else if(loi_U == "Gamma"){
U <- lapply(N, function(n) rgamma(n, params_loi_U[1], params_loi_U[2]))
}
# Somme des sinistres
X <- unlist(lapply(U, sum))
X
#' @param loi_N : loi de proba des nombres de sinistres
#' @param loi_U : Loi de proba des montants de sinsitres
#' @param params_loi_N : Paramètres de la loi de N
#' @param params_loi_U : Paramètres de la loi de U
#' @param sample_size : Taille de l'échantillon
#'
#' @return Un échantillon de réalisations de X
#' @export
#'
#' @examples
simulate_X <- function(loi_N = "Poisson", loi_U = "Gamma",
params_loi_N = c(2,0), params_loi_U = c(1, 1),
sample_size = 10){
#Simulation du nombre de sinistres
if(loi_N == "Poisson"){
N <- rpois(sample_size, params_loi_N[1])
}else if(loi_N == "Binomial Negatif"){
N <- rnbinom(sample_size, size = params_loi_N[1], prob = params_loi_N[2])
}
#Simultation des montants de sinistres
if(loi_U == "Abs-Normal"){
U <- lapply(N, function(n) abs(rnorm(n, params_loi_U[1], params_loi_U[2])))
}else if(loi_U == "Gamma"){
U <- lapply(N, function(n) rgamma(n, params_loi_U[1], params_loi_U[2]))
}
# Somme des sinistres
X <- unlist(lapply(U, sum))
return(X)
}
simulate_X()
simulate_X('Binomial Negatif', 'Abs-Normal', c(2,3), c(0,1), 100 )
#' @param loi_N : loi de proba des nombres de sinistres
#' @param loi_U : Loi de proba des montants de sinsitres
#' @param params_loi_N : Paramètres de la loi de N
#' @param params_loi_U : Paramètres de la loi de U
#' @param sample_size : Taille de l'échantillon
#'
#' @return Un échantillon de réalisations de X
#' @export
#'
#' @examples
simulate_X <- function(loi_N = "Poisson", loi_U = "Gamma",
params_loi_N = c(2,0), params_loi_U = c(1, 1),
sample_size = 10){
browser()
#Simulation du nombre de sinistres
if(loi_N == "Poisson"){
N <- rpois(sample_size, params_loi_N[1])
}else if(loi_N == "Binomial Negatif"){
N <- rnbinom(sample_size, size = params_loi_N[1], prob = params_loi_N[2])
}
#Simultation des montants de sinistres
if(loi_U == "Abs-Normal"){
U <- lapply(N, function(n) abs(rnorm(n, params_loi_U[1], params_loi_U[2])))
}else if(loi_U == "Gamma"){
U <- lapply(N, function(n) rgamma(n, params_loi_U[1], params_loi_U[2]))
}
# Somme des sinistres
X <- unlist(lapply(U, sum))
return(X)
}
simulate_X('Binomial Negatif', 'Abs-Normal', c(2,3), c(0,1), 100 )
simulate_X('Binomial Negatif', 'Abs-Normal', c(2,3), c(0,1), 100 )
params_loi_U
N
params_loi_N
params_loi_N[1]
params_loi_N[2]
help(rbinom)
help(rnbinom)
simulate_X('Binomial Negatif', 'Abs-Normal', c(2,0.33), c(0,1), 100 )
N
U
#' @param loi_N : loi de proba des nombres de sinistres
#' @param loi_U : Loi de proba des montants de sinsitres
#' @param params_loi_N : Paramètres de la loi de N
#' @param params_loi_U : Paramètres de la loi de U
#' @param sample_size : Taille de l'échantillon
#'
#' @return Un échantillon de réalisations de X
#' @export
#'
#' @examples
simulate_X <- function(loi_N = "Poisson", loi_U = "Gamma",
params_loi_N = c(2,0), params_loi_U = c(1, 1),
sample_size = 10){
browser()
#Simulation du nombre de sinistres
if(loi_N == "Poisson"){
N <- rpois(sample_size, params_loi_N[1])
}else if(loi_N == "Binomial Negatif"){
N <- rnbinom(sample_size, size = params_loi_N[1], prob = params_loi_N[2])
}
#Simultation des montants de sinistres
if(loi_U == "Abs-Normal"){
U <- lapply(N, function(n) abs(rnorm(n, params_loi_U[1], params_loi_U[2])))
}else if(loi_U == "Gamma"){
U <- lapply(N, function(n) rgamma(n, params_loi_U[1], params_loi_U[2]))
}
# Somme des sinistres
X <- unlist(lapply(U, sum))
return(X)
}
#' @param loi_N : loi de proba des nombres de sinistres
#' @param loi_U : Loi de proba des montants de sinsitres
#' @param params_loi_N : Paramètres de la loi de N
#' @param params_loi_U : Paramètres de la loi de U
#' @param sample_size : Taille de l'échantillon
#'
#' @return Un échantillon de réalisations de X
#' @export
#'
#' @examples
simulate_X <- function(loi_N = "Poisson", loi_U = "Gamma",
params_loi_N = c(2,0), params_loi_U = c(1, 1),
sample_size = 10){
#Simulation du nombre de sinistres
if(loi_N == "Poisson"){
N <- rpois(sample_size, params_loi_N[1])
}else if(loi_N == "Binomial Negatif"){
N <- rnbinom(sample_size, size = params_loi_N[1], prob = params_loi_N[2])
}
#Simultation des montants de sinistres
if(loi_U == "Abs-Normal"){
U <- lapply(N, function(n) abs(rnorm(n, params_loi_U[1], params_loi_U[2])))
}else if(loi_U == "Gamma"){
U <- lapply(N, function(n) rgamma(n, params_loi_U[1], params_loi_U[2]))
}
# Somme des sinistres
X <- unlist(lapply(U, sum))
return(X)
}
simulate_X('Binomial Negatif', 'Abs-Normal', c(2,0.33), c(0,1), 100 )
#' compute_X : Fonction qui approche ma moyenne et la fdr pour des
#' montants agrégés de sinistres
#'
#' @param X_ech : Echantillons de réalisation de X
#' @param x : Point auquel j'évalue la fdr
#'
#' @return La moyenne empirique et la fonction de répartition
#' @export
#'
#' @examples
X_ech <- simulate_X()
X_ech
mean(X_ech)
x <- 3
X_ech[X_ech < 3]
length(X_ech[X_ech < 3])
length(X_ech[X_ech < 3]) / lenght(X_ech)
length(X_ech[X_ech < 3]) / length(X_ech)
X_ech < 3
sum(X_ech < 3)
mean(X_ech < 3)
mean(X_ech < x)
compute_X <- function(x, X_ech){
return(
list('moyenne' = mean(X_ech), 'fdr'= mean(X_ech < x))
)
}
compute_X(x, X_ech)
res <- compute_X(x, X_ech)
res$moyenne
fun <- function(x) x + 2 * exp(- x) - 1
plot(fun)
fun <- function(x) x + 1/2 * exp(- x) - 1
plot(fun)
fun <- function(x) x + 2  *(exp(- x) - 1 )
plot(fun)
c = 0.3
t = 20
lam = 1
p = 0.1
b=5
fun <- function(x) -c*x -(lam*p + 1/t) + lam*p*exp(x* b)  *(exp(- x) - 1 )
plot(fun)
fun <- function(x) -c * x -(lam * p + 1/t) + lam * p * exp(x * b)
plot(fun)
fun(0)
fun(0.01)
plot(fun(seq(0,3,0.01)))
fun(0.1)
fun(1)
plot(fun(seq(0,1,0.01)))
fun(0.5)
plot(fun(seq(0,0.5,0.01)))
fun(0.1)
fun(0.25)
fun(0.2)
fun(0.15)
fun(0.11)
fun(0.10)
fun(0.112)
fun(0.12)
fun(0.13)
fun(0.125)
plot(fun(seq(-0.05,0.5,0.01)))
plot(fun(seq(-0.5,0.5,0.01)))
uniroot(fun)
uniroot(fun, interval  = c(-0.5, 0.5))
fun(-0.5)
fun(0.5)
uniroot(fun, interval  = c(-0.5, 0))
uniroot(fun, interval  = c(0, 0.5))
V <- function(c,t, lam, p, b){
C1 <- (c- p*b*lam)*t
C2 <- 1
C3 <- - C1
return(c(C1 * exp(r1*u)+ C2*u + C3), C1 * exp(r2*u)+ C2*u + C3) )
}
V <- function(c,t, lam, p, b){
C1 <- (c- p*b*lam)*t
C2 <- 1
C3 <- - C1
return(c(C1 * exp(r1*u)+ C2*u + C3, C1 * exp(r2*u)+ C2*u + C3) )
}
V(c,t, lam, p, b)
r1 <- uniroot(fun, interval  = c(-0.5, 0))$root
r2 <- uniroot(fun, interval  = c(0, 0.5))$root
V <- function(c,t, lam, p, b){
C1 <- (c- p*b*lam)*t
C2 <- 1
C3 <- - C1
return(c(C1 * exp(r1*u)+ C2*u + C3, C1 * exp(r2*u)+ C2*u + C3) )
}
V(c,t, lam, p, b)
u = 1
r1 <- uniroot(fun, interval  = c(-0.5, 0))$root
r2 <- uniroot(fun, interval  = c(0, 0.5))$root
V <- function(u, c,t, lam, p, b){
C1 <- (c- p*b*lam)*t
C2 <- 1
C3 <- - C1
return(c(C1 * exp(r1*u)+ C2*u + C3, C1 * exp(r2*u)+ C2*u + C3) )
}
V(u, c,t, lam, p, b)
u = 10
V(u, c,t, lam, p, b)
u = 2
fun <- function(x) -c * x -(lam * p + 1/t) + lam * p * exp(x * b)
plot(fun(seq(-0.5,0.5,0.01)))
fun(0.125)
r1 <- uniroot(fun, interval  = c(-0.5, 0))$root
r2 <- uniroot(fun, interval  = c(0, 0.5))$root
V <- function(u, c,t, lam, p, b){
C1 <- (c- p*b*lam)*t
C2 <- 1
C3 <- - C1
return(c(C1 * exp(r1*u)+ C2*u + C3, C1 * exp(r2*u)+ C2*u + C3) )
}
V(u, c,t, lam, p, b)
fun <- function(x) -c * x -(lam * p + 1/t) + lam * p * exp(x * b)
c = 0.3
t = 20
lam = 1
p = 0.1
b=5
u = 2
fun <- function(x) -c * x -(lam * p + 1/t) + lam * p * exp(x * b)
plot(fun(seq(-0.5,0.5,0.01)))
plot(fun(seq(-5,5,0.01)))
c = 0.3
t = 20
lam = 1
p = 0.1
b=5
u = 2
fun <- function(x) c * x -(lam * p + 1/t) - lam * p * exp(x * b)
plot(fun(seq(-5,5,0.01)))
plot(fun(seq(-5,5,0.01)), seq(-5,5,0.01))
plot(seq(-5,5,0.01), fun(seq(-5,5,0.01)))
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
plot(seq(-5,5,0.01), fun(seq(-5,5,0.01)))
plot(seq(-5,0,0.01), fun(seq(-5,0,0.01)))
plot(seq(-5,1,0.01), fun(seq(-5,1,0.01)))
p*lam*b
c = 0.4
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
plot(seq(-5,1,0.01), fun(seq(-5,1,0.01)))
c = 0.5
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
plot(seq(-5,1,0.01), fun(seq(-5,1,0.01)))
fun(0.125)
r1 <- uniroot(fun, interval  = c(-5, 0))$root
r1
r2
c = 1
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
plot(seq(-5,1,0.01), fun(seq(-5,1,0.01)))
c = 0.1
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
plot(seq(-5,1,0.01), fun(seq(-5,1,0.01)))
c = 0.01
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
plot(seq(-5,1,0.01), fun(seq(-5,1,0.01)))
fun(0.125)
r1 <- uniroot(fun, interval  = c(-5, 0))$root
fun(-5)
fun(0)
fun(-20)
r1 <- uniroot(fun, interval  = c(-20, 0))$root
r1
r2 <- uniroot(fun, interval  = c(0, 0.5))$root
r2
fun(log(c/ p / lam / b)/b)
c = 2
fun(log(c/ p / lam / b)/b)
c = 2
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
fun(log(c/ p / lam / b)/b)
c = 20
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
fun(log(c/ p / lam / b)/b)
log(c/ p / lam / b)/b
c = 0.2
fun(log(c/ p / lam / b)/b)
c = 0.02
fun(log(c/ p / lam / b)/b)
c = 0.002
fun(log(c/ p / lam / b)/b)
c = 0.002
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
fun(log(c/ p / lam / b)/b)
c = 0.0002
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
fun(log(c/ p / lam / b)/b)
c = 0
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
fun(log(c/ p / lam / b)/b)
c = 0.01
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
fun(log(c/ p / lam / b)/b)
plot(fun(u) u-log(u)-1)
plot(function(u) u-log(u)-1)
plot(seq(1, 10, 1), function(u) u-log(u)-1))
plot(seq(1, 10, 1), function(u) u-log(u)-1)
plot(seq(0, 10, 0.1), fun(seq(1, 10,0.1)) )
fun <- function(u) u-log(u)-1
plot(seq(0, 10, 0.1), fun(seq(1, 10,0.1)) )
plot(seq(0, 10, 0.1), fun(seq(0, 10,0.1)) )
c = 0.01
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
plot(seq(0, 10, 0.1), fun(seq(0, 10,0.1)) )
r1 <- uniroot(fun, interval  = c(-20, 0))$root
r2 <- uniroot(fun, interval  = c(0, 0.5))$root
r1
c = 2
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
plot(seq(0, 10, 0.1), fun(seq(0, 10,0.1)) )
r1 <- uniroot(fun, interval  = c(-20, 0))$root
r1
fun <- function(x) 3*p/(1+2*p-p^2)
plot(seq(0, 1, 0.01), fun(seq(0, 1,0.01)) )
fun <- function(p) 3*p/(1+2*p-p^2)
plot(seq(0, 1, 0.01), fun(seq(0, 1,0.01)) )
fun <- function(p) 3*p/(1+2*p-p^2)   - p
plot(seq(0, 1, 0.01), fun(seq(0, 1,0.01)) )
fun <- function(p) p - 3*p/(1+2*p-p^2)
plot(seq(0, 1, 0.01), fun(seq(0, 1,0.01)) )
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p + 2*p^2-2*p^3)/ (1-2*p+p**2)
plot(seq(0, 1, 0.01), fun(seq(0, 1,0.01)) )
plot(seq(0, 1/2, 0.01), fun(seq(0, 1/2,0.01)) )
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p + 2*p^2-2*p^3)/ (1+2*p-p**2)
plot(seq(0, 1/2, 0.01), fun(seq(0, 1/2,0.01)) )
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p + 2*p^2-2*p^3)/ (1+2*p-p**2)
plot(seq(0, 1/2, 0.01), fun(seq(0, 1/2,0.01)) )
q = 1/2
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p*q + 2*p^2-2*p^3)/ (1+2*p-p**2)
plot(seq(0, 1/2, 0.01), fun(seq(0, 1/2,0.01)) )
q = 1/3
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p*q + 2*p^2-2*p^3)/ (1+2*p-p**2)
plot(seq(0, 1/2, 0.01), fun(seq(0, 1/2,0.01)) )
q = 2/3
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p*q + 2*p^2-2*p^3)/ (1+2*p-p**2)
plot(seq(0, 1/2, 0.01), fun(seq(0, 1/2,0.01)) )
q = 2/3
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p*q + 2*p^2-2*p^3)/ (1+2*p-p**2)
plot(seq(0, 1/2, 0.01), fun(seq(0, 1/2,0.01)) )
q = 1/4
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p*q + 2*p^2-2*p^3)/ (1+2*p-p**2)
plot(seq(0, 1/2, 0.01), fun(seq(0, 1/2,0.01)) )
q = 0
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p*q + 2*p^2-2*p^3)/ (1+2*p-p**2)
plot(seq(0, 1/2, 0.01), fun(seq(0, 1/2,0.01)) )
fun <- function(p) p - (2*p^2 + (1-2*p+p**2)*p*q + 2*p^2-2*p^3)/ (1+2*p-p**2)
plot(seq(0, 0.9, 0.01), fun(seq(0, 0.9,0.01)) )
t = 10
lam = 1
p = 0.1
b=5
c = 0.3
t = 10
lam = 1
p = 0.1
b=5
u = 2
c = 0.3
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
r1 <- uniroot(fun, interval  = c(-20, 0))$root
r2 <- uniroot(fun, interval  = c(0, 0.5))$root
r1
r2
t = 20
lam = 1
p = 0.1
b=5
u = 2
c = 0.3
fun <- function(x) c * x +(lam * p + 1/t) - lam * p * exp(x * b)
r1 <- uniroot(fun, interval  = c(-20, 0))$root
r2 <- uniroot(fun, interval  = c(0, 0.5))$root
r1
r2
install.packages("CASdataset")
install.packages("CASdatasets", repos = "http://dutangc.free.fr/pub/RRepos/", type="source")
data(ausautoBI8999)
ausautoBI8999
library(CASdatasets)
install.packages("CASdatasets", repos = "http://dutangc.free.fr/pub/RRepos/", type="source")
library(CASdatasets)
install.packages("xts")
install.packages("sp")
install.packages("~/CASdatasets_1.0-10.tar.gz", repos = NULL, type = "source")
library(CASdatasets)
data(ausautoBI8999)
ausautoBI8999
summary(ausautoBI8999)
data("besecura")
summary(besecura)
besecura
boxplot(besecura$Loss)
besecura_data <- data.frame(besecura)
boxplot(besecura_data$Loss)
ausautoBI8999_data <- data.frame(ausautoBI8999)
boxplot(ausautoBI8999_data$AggClaim)
itamtpcost_data <- data.frame(itamtpcost)
help(CASdatasets)
itamtpcost_data <- data.frame(itamtplcost)
data(itamtplcost)
itamtpcost_data <- data.frame(itamtplcost)
View(besecura_data)
View(besecura_data)
View(besecura_data)
setwd("C:/Users/pierr/Dropbox/Goffard-Laub/Code/Data")
write_csv("C:/Users/pierr/Dropbox/Goffard-Laub/Code/Data/itamtpcost_data.csv",
path, append = FALSE, col_names = !append)
install.packages("readr")
library(readr)
write_csv("C:/Users/pierr/Dropbox/Goffard-Laub/Code/Data/itamtpcost_data.csv",
path, append = FALSE, col_names = !append)
write_csv(itamtpcost_data,
"C:/Users/pierr/Dropbox/Goffard-Laub/Code/Data/itamtpcost_data.csv",
append = FALSE, col_names = !append)
write_csv(itamtpcost_data,
"C:/Users/pierr/Dropbox/Goffard-Laub/Code/Data/itamtpcost_data.csv",
append = FALSE, col_names = TRUE)
write_csv(ausautoBI8999_data,
"C:/Users/pierr/Dropbox/Goffard-Laub/Code/Data/ausautoBI8999.csv",
append = FALSE, col_names = TRUE)
write_csv(besecura_data,
"C:/Users/pierr/Dropbox/Goffard-Laub/Code/Data/besecura.csv",
append = FALSE, col_names = TRUE)
